{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ItemForm","props","state","name","cals","protein","fat","carbs","servings","totalservings","handleChange","bind","handleSubmit","prevProps","console","log","editing","this","setState","item","onSubmit","className","id","type","placeholder","ref","input","nameInput","onChange","value","e","args","target","preventDefault","newItem","visible","focus","React","Component","getItemStyle","isDragging","draggableStyle","background","TodoApp","items","handleEditSubmit","onDragEnd","result","destination","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","i","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","document","createElement","setAttribute","exporttitle","body","appendChild","click","obj","parse","reader","FileReader","onload","onReaderLoad","readAsText","files","totalG","reduce","sum","totalProtein","totalFat","totalCarbs","totalCals","that","droppableId","provided","snapshot","droppableProps","innerRef","style","isDraggingOver","map","key","draggableId","draggableProps","dragHandleProps","toFixed","onClick","startEdit","toggleVisible","deleteItem","Math","round","exportJson","importJson","width","aria-label","concat","editedItem","Boolean","window","location","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e80747f7.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\n\n\nclass ItemForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      name: props.name || '',\n      cals: props.cals || '',\n      protein: props.protein || '0',\n      fat: props.fat || '0',\n      carbs: props.carbs || '0',\n      servings: props.servings || \"1\",\n      totalservings: props.totalservings || \"1\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidUpdate(prevProps) {\n    console.log('huh', prevProps.editing, this.props.editing);\n    if (prevProps.editing != this.props.editing) {\n      this.setState({\n        name: this.props.item.name,\n        cals: this.props.item.cals,\n        protein: this.props.item.protein,\n        fat: this.props.item.fat,\n        carbs: this.props.item.carbs,\n        servings: this.props.item.servings,\n        totalservings: this.props.item.totalservings\n      })\n    }\n  }\n  render() {\n    return (\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"columns\">\n            <div className=\"column\">\n              <div className=\"field is-horizontal\">\n                <div className=\"field-body\">\n                  <div className=\"field\">\n                    <p className=\"control\">\n                      <input \n                        id=\"name\"\n                        className=\"input is-small\" \n                        type=\"text\" \n                        placeholder=\"Name\"\n                        ref={(input) => { this.nameInput = input; }}\n                        onChange={this.handleChange}\n                        value={this.state.name} />\n                    </p>\n                  </div>\n                  <div className=\"field\">\n                    <p className=\"control\">\n                      <input \n                        id=\"cals\"\n                        className=\"input is-small\" \n                        type=\"text\" \n                        placeholder=\"Cals\"\n                        onChange={this.handleChange}\n                        value={this.state.cals} />\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"field is-horizontal\">\n                <div className=\"field-body\">\n                  <div className=\"field\">\n                    <p className=\"control\">\n                      <input \n                        id=\"protein\"\n                        className=\"input is-small\" \n                        type=\"text\" \n                        placeholder=\"Protein\"\n                        onChange={this.handleChange}\n                        value={this.state.protein} />\n                    </p>\n                  </div>\n                  <div className=\"field\">\n                    <p className=\"control\">\n                      <input \n                        id=\"fat\"\n                        className=\"input is-small\" \n                        type=\"text\" \n                        placeholder=\"Fat\"\n                        onChange={this.handleChange}\n                        value={this.state.fat} />\n                    </p>\n                  </div>\n                  <div className=\"field\">\n                    <p className=\"control\">\n                      <input \n                        id=\"carbs\"\n                        className=\"input is-small\" \n                        type=\"text\" \n                        placeholder=\"Carbs\"\n                        onChange={this.handleChange}\n                        value={this.state.carbs} />\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"field is-horizontal\">\n                <div className=\"field-body\">\n                  <div className=\"field\">\n                    <p className=\"control\">\n                      <input \n                        id=\"servings\"\n                        className=\"input is-small\" \n                        type=\"text\" \n                        placeholder=\"Servings\"\n                        onChange={this.handleChange}\n                        value={this.state.servings} />\n                    </p>\n                  </div>\n                  <div className=\"field\">\n                    <p className=\"control\">\n                      <input \n                        id=\"totalservings\"\n                        className=\"input is-small\" \n                        type=\"text\" \n                        placeholder=\"Total servings\"\n                        onChange={this.handleChange}\n                        value={this.state.totalservings} />\n                    </p>\n                  </div>\n                  <div className=\"field\">\n                    <div className=\"control\">\n                      <button className=\"button is-primary\">\n                        Add item\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </form>\n    );\n  }\n\n  handleChange(e) {\n    var args = {};\n    args[e.target.id] = e.target.value;\n    this.setState(args);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    /*if (!this.state.text.length) {\n      return;\n    }*/\n    const newItem = {\n      name: this.state.name,\n      cals: this.state.cals,\n      protein: this.state.protein,\n      fat: this.state.fat,\n      carbs: this.state.carbs,\n      servings: this.state.servings,\n      totalservings: this.state.totalservings,\n      visible: true\n    };\n    this.props.handleSubmit(newItem);\n    this.setState(state => ({\n      name: '',\n      cals: '',\n      protein: '0',\n      fat: '0',\n      carbs: '0',\n      servings: '1',\n      totalservings: '1'\n    }));\n    this.nameInput.focus();\n  }\n}\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n\n//const grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  //userSelect: \"none\",\n  //padding: grid * 2,\n  //margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  //background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  //padding: grid,\n  //width: 250\n});\n\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      items: [],\n      editing: -1\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleEditSubmit = this.handleEditSubmit.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n  startEdit(i, e) {\n    this.setState({\n      editing: i\n    })\n  }\n  exportJson(e) {\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(this.state.items));\n    //var dlAnchorElem = document.getElementById('downloadAnchorElem');\n    var dlAnchorElem = document.createElement(\"a\");\n    dlAnchorElem.setAttribute(\"href\",     dataStr     );\n    dlAnchorElem.setAttribute(\"download\", this.state.exporttitle+\".json\");\n    document.body.appendChild(dlAnchorElem); // Required for FF\n    dlAnchorElem.click();\n  }\n  onReaderLoad(e) {\n    console.log(e.target.result);\n    var obj = JSON.parse(e.target.result);\n    console.log(obj);\n    this.setState({\n      items: obj\n    })\n    //alert_data(obj.name, obj.family);\n  }\n  importJson(e) {\n    var reader = new FileReader();\n    reader.onload = this.onReaderLoad.bind(this);\n    reader.readAsText(e.target.files[0]);\n  }\n  render() {\n    var totalG = this.state.items.reduce(function (sum, item) {\n      if (item.visible)\n        return sum + (item.protein*item.servings/item.totalservings) + (item.fat*item.servings/item.totalservings) + (item.carbs*item.servings/item.totalservings);\n      return sum;\n    }, 0);\n\n    var totalProtein = this.state.items.reduce(function (sum, item) {\n      if (item.visible)  \n        return sum + (item.protein*item.servings/item.totalservings);\n      return sum;\n    }, 0);\n\n    var totalFat = this.state.items.reduce(function (sum, item) {\n      if (item.visible)  \n        return sum + (item.fat*item.servings/item.totalservings);\n      return sum;\n    }, 0);\n\n    var totalCarbs = this.state.items.reduce(function (sum, item) {\n      if (item.visible)  \n        return sum + (item.carbs*item.servings/item.totalservings);\n      return sum;\n    }, 0);\n\n    var totalCals = this.state.items.reduce(function (sum, item) {\n      if (item.visible)\n        return sum + (item.cals*item.servings/item.totalservings);\n      return sum;\n    }, 0);\n\n    var that = this;\n\n    return (\n      <div className=\"container\">\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <table className=\"table is-fullwidth is-hoverable\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Cals</th>\n                <th>Protein</th>\n                <th>Fat</th>\n                <th>Carbs</th>\n                <th>Servings</th>\n                <th></th>\n                <th></th>\n                <th></th>\n              </tr>\n            </thead>\n            <Droppable droppableId=\"droppable\">\n              {(provided, snapshot) => (\n                <tbody\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}>\n                  {this.state.items.map((item, index) => (\n                    <Draggable key={'drag'+index} draggableId={'drag'+index} index={index}>\n                      {(provided, snapshot) => (\n                        <tr\n                          className={item.visible ? '' : 'has-text-grey-lighter'}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <td>{item.name}</td>\n                          <td>{(item.cals*item.servings/item.totalservings).toFixed(2)}</td>\n                          <td>{(item.protein*item.servings/item.totalservings).toFixed(2)}</td>\n                          <td>{(item.fat*item.servings/item.totalservings).toFixed(2)}</td>\n                          <td>{(item.carbs*item.servings/item.totalservings).toFixed(2)}</td>\n                          <td>{item.servings+'/'+item.totalservings}</td>\n                          <td>\n                            <p className=\"buttons\">\n                              <button className=\"button is-small\" onClick={that.startEdit.bind(that, index)}>\n                                <span className=\"icon is-small has-text-primary\">\n                                  <i className=\"fas fa-pen\"></i>\n                                </span>\n                              </button>\n                            </p>\n                          </td>\n                          <td>\n                            <p className=\"buttons\">\n                              <button className=\"button is-small\" onClick={that.toggleVisible.bind(that, index)}>\n                                <span className={\"icon is-small \"+(item.visible ? '' : 'has-text-grey-lighter')}>\n                                  <i className=\"fas fa-eye\"></i>\n                                </span>\n                              </button>\n                            </p>\n                          </td>\n                          <td>\n                            <p className=\"buttons\">\n                              <button className=\"button is-small\" onClick={that.deleteItem.bind(that, index)}>\n                                <span className=\"icon is-small has-text-danger\">\n                                  <i className=\"fas fa-times\"></i>\n                                </span>\n                              </button>\n                            </p>\n                          </td>\n                        </tr>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </tbody>\n              )}\n            </Droppable>\n            <tfoot>\n            <tr>\n              <td>Total</td>\n              <td>{totalCals.toFixed(2)}</td>\n              <td>{totalProtein.toFixed(2)+\" (\"+Math.round(totalProtein*100/totalG)+\"%)\"}</td>\n              <td>{totalFat.toFixed(2)+\" (\"+Math.round(totalFat*100/totalG)+\"%)\"}</td>\n              <td>{totalCarbs.toFixed(2)+\" (\"+Math.round(totalCarbs*100/totalG)+\"%)\"}</td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n            </tr>\n          </tfoot>\n          </table>\n        </DragDropContext>\n\n        <div className=\"columns\">\n          <div className=\"column\"></div>\n          <div className=\"column\">\n            <ItemForm handleSubmit={this.handleSubmit} />\n          </div>\n          <div className=\"column\"></div>\n        </div>\n        \n        <div className=\"field has-addons\">\n          <div className=\"control\">\n            <input \n              id=\"exporttitle\"\n              className=\"input\" \n              type=\"text\" \n              placeholder=\"Title\"\n              onChange={this.handleChange}\n              value={this.state.exporttitle} />\n          </div>\n          <div className=\"control\">\n            <a className=\"button is-info\" onClick={this.exportJson.bind(this)}>\n              Export\n            </a>\n          </div>\n        </div>\n        <div className=\"file\">\n          <label className=\"file-label\">\n            <input className=\"file-input\" type=\"file\" name=\"list\" onChange={this.importJson.bind(this)} />\n            <span className=\"file-cta\">\n              <span className=\"file-icon\">\n                <i className=\"fas fa-upload\"></i>\n              </span>\n              <span className=\"file-label\">\n                Import\n              </span>\n            </span>\n          </label>\n        </div>\n        <div className={\"modal \"+(this.state.editing != -1 ? 'is-active' : '')}>\n          <div className=\"modal-background\"></div>\n          <div className=\"modal-card\" style={{width:480}}>\n            <header className=\"modal-card-head\">\n              <p className=\"modal-card-title\">Edit item</p>\n              <button className=\"delete\" aria-label=\"close\" onClick={() => {this.setState({editing: -1})}}></button>\n            </header>\n            <section className=\"modal-card-body\">\n              <ItemForm handleSubmit={this.handleEditSubmit} editing={this.state.editing} item={this.state.editing != -1 ? this.state.items[this.state.editing] : {}} />\n            </section>\n            {/*<footer className=\"modal-card-foot\">\n              <button className=\"button is-success\">Save changes</button>\n              <button className=\"button\">Cancel</button>\n            </footer>*/}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    var args = {};\n    args[e.target.id] = e.target.value;\n    this.setState(args);\n  }\n\n  handleSubmit(newItem) {\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n    }));\n  }\n  handleEditSubmit(editedItem) {\n    this.state.items[this.state.editing] = editedItem;\n    this.setState(state => ({\n      items: this.state.items,\n      editing: -1\n    }));\n  }\n  toggleVisible(index, e) {\n    this.state.items[index].visible = !this.state.items[index].visible;\n    this.setState(state => ({\n      items: this.state.items,\n    }));\n  }\n  deleteItem(index, e) {\n    this.state.items.splice(index, 1);\n    this.setState(state => ({\n      items: this.state.items,\n    }));\n  }\n}\n\nexport default TodoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}